#ifndef _LIBNUKEXX_TYPE_TRAITS_
#define _LIBNUKEXX_TYPE_TRAITS_

namespace std
{
    template <typename>
    struct remove_cv;

    template <typename>
    struct remove_volatile;

    template <typename>
    struct remove_const;

    template <typename, typename>
    struct is_same;

    template <typename T, T v>
    struct integral_constant
    {
        typedef T value_type;
        typedef integral_constant type;

        static constexpr value_type value = v;

        constexpr operator value_type() const
        {
            return value;
        }
    };

    typedef std::integral_constant<bool, true> true_type;
    typedef std::integral_constant<bool, false> false_type;

    template <typename T>
    struct is_void : std::integral_constant<bool, std::is_same<void, typename std::remove_cv<T>::type>::value>
    {
    };

    template <typename>
    struct __is_integral_helper : false_type
    {
    };

    <% [ "bool", "char16_t", "char32_t" ].each do |type| %>

    template <>
    struct __is_integral_helper<<%= type %>> : true_type
    {
    };

    <% end %>

    <% [ "char" , "short int", "int", "long long int" ].each do |type| %>
    <% [ "signed", "unsigned" ].each do |sign| %>

    template <>
    struct __is_integral_helper<<%= sign %> <%= type %>> : true_type
    {
    };

    <% end %>
    <% end %>

    template <typename T>
    struct is_integral : __is_integral_helper<typename std::remove_cv<T>::type>
    {
    };

    template <typename T>
    struct is_floating_point : std::integral_constant<bool, std::is_same<float, typename std::remove_cv<T>::type>::value || std::is_same<double, typename std::remove_cv<T>::type>::value || std::is_same<long double, typename std::remove_cv<T>::type>::value>
    {
    };

    template <typename>
    struct is_array : false_type
    {
    };

    template <typename T>
    struct is_array<T[]> : true_type
    {
    };

    template <typename T, std::size_t N>
    struct is_array<T[N]> : true_type
    {
    };

    template <typename T>
    struct is_enum : std::integral_constant<bool, __is_enum(T)>
    {
    };

    template <typename T>
    struct is_union : std::integral_constant<bool, __is_union(T)>
    {
    };

    template <typename T>
    struct is_class : std::integral_constant<bool, __is_class(T)>
    {
    };

    template <typename>
    struct is_function : false_type
    {
    };

    <% [ "", "", "const", "volatile" ].combination(2).to_a.uniq.each do |qualifier| %>

    template <typename T, typename ... A>
    struct is_function<T(A ...)<%= qualifier.join(" ").strip.size.eql?(0) ? "" : " " %><%= qualifier.join(" ").strip %>> : true_type
    {
    };

    template <typename T, typename ... A>
    struct is_function<T(A ... ...)<%= qualifier.join(" ").strip.size.eql?(0) ? "" : " " %><%= qualifier.join(" ").strip %>> : true_type
    {
    };

    <% end %>

    template <typename T>
    struct __is_pointer_helper : false_type
    {
    };

    template <typename T>
    struct __is_pointer_helper<T *> : true_type
    {
    };

    template <typename T>
    struct is_pointer : __is_pointer_helper<typename std::remove_cv<T>::type>
    {
    };

    template <typename T>
    struct is_lvalue_reference : false_type
    {
    };

    template <typename T>
    struct is_lvalue_reference<T &> : true_type
    {
    };

    template <typename T>
    struct is_rvalue_reference : false_type
    {
    };

    template <typename T>
    struct is_rvalue_reference<T &&> : true_type
    {
    };

    template <typename T>
    struct is_arithmetic : std::integral_constant<bool, std::is_integral<T>::value || std::is_floating_point<T>::value>
    {
    };

    template <typename T>
    struct __is_member_pointer_helper : false_type
    {
    };

    template <typename T, typename U>
    struct __is_member_pointer_helper<T U::*> : true_type
    {
    };

    template <typename T>
    struct is_member_pointer : __is_member_pointer_helper<typename std::remove_cv<T>::type>
    {
    };

    template <typename T, typename U>
    struct is_same : false_type
    {
    };

    template <typename T>
    struct is_same<T, T> : true_type
    {
    };

    template <typename T>
    struct remove_cv
    {
        typedef typename std::remove_volatile<typename std::remove_const<T>::type>::type type;
    };

    template <typename T>
    struct remove_const
    {
        typedef T type;
    };

    template <typename T>
    struct remove_const<const T>
    {
        typedef T type;
    };

    template <typename T>
    struct remove_volatile
    {
        typedef T type;
    };

    template <typename T>
    struct remove_volatile<volatile T>
    {
        typedef T type;
    };
}

#endif

#ifndef _LIBNUKEXX_TYPE_TRAITS_
#define _LIBNUKEXX_TYPE_TRAITS_

namespace std
{
    template <typename T, T v>
    struct integral_constant
    {
        typedef T value_type;
        typedef integral_constant type;

        static constexpr value_type value = v;

        constexpr operator value_type() const
        {
            return value;
        }
    };

    typedef std::integral_constant<bool, true> true_type;
    typedef std::integral_constant<bool, false> false_type;

    template <typename>
    struct __is_integral_helper : false_type
    {
    };

    <% [ "bool", "char16_t", "char32_t" ].each do |type| %>

    template <>
    struct __is_integral_helper<<%= type %>> : true_type
    {
    };

    <% end %>

    <% [ "char" , "short int", "int", "long long int" ].each do |type| %>
    <% [ "signed", "unsigned" ].each do |sign| %>

    template <>
    struct __is_integral_helper<<%= sign %> <%= type %>> : true_type
    {
    };

    <% end %>
    <% end %>

    template <typename T>
    struct is_integral : __is_integral_helper<typename std::remove_cv<T>::type>
    {
    };
}

#endif
